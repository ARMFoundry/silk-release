// This file was generated by counterfeiter
package fakes

import "sync"

type CIDRPool struct {
	GetRandomStub        func() string
	getRandomMutex       sync.RWMutex
	getRandomArgsForCall []struct{}
	getRandomReturns     struct {
		result1 string
	}
	getRandomReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CIDRPool) GetRandom() string {
	fake.getRandomMutex.Lock()
	ret, specificReturn := fake.getRandomReturnsOnCall[len(fake.getRandomArgsForCall)]
	fake.getRandomArgsForCall = append(fake.getRandomArgsForCall, struct{}{})
	fake.recordInvocation("GetRandom", []interface{}{})
	fake.getRandomMutex.Unlock()
	if fake.GetRandomStub != nil {
		return fake.GetRandomStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getRandomReturns.result1
}

func (fake *CIDRPool) GetRandomCallCount() int {
	fake.getRandomMutex.RLock()
	defer fake.getRandomMutex.RUnlock()
	return len(fake.getRandomArgsForCall)
}

func (fake *CIDRPool) GetRandomReturns(result1 string) {
	fake.GetRandomStub = nil
	fake.getRandomReturns = struct {
		result1 string
	}{result1}
}

func (fake *CIDRPool) GetRandomReturnsOnCall(i int, result1 string) {
	fake.GetRandomStub = nil
	if fake.getRandomReturnsOnCall == nil {
		fake.getRandomReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getRandomReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *CIDRPool) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRandomMutex.RLock()
	defer fake.getRandomMutex.RUnlock()
	return fake.invocations
}

func (fake *CIDRPool) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
