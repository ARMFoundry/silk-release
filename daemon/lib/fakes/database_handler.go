// This file was generated by counterfeiter
package fakes

import (
	"sync"
)

type DatabaseHandler struct {
	MigrateStub        func() (int, error)
	migrateMutex       sync.RWMutex
	migrateArgsForCall []struct{}
	migrateReturns     struct {
		result1 int
		result2 error
	}
	migrateReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	AddEntryStub        func(string, string) error
	addEntryMutex       sync.RWMutex
	addEntryArgsForCall []struct {
		arg1 string
		arg2 string
	}
	addEntryReturns struct {
		result1 error
	}
	addEntryReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteEntryStub        func(string) error
	deleteEntryMutex       sync.RWMutex
	deleteEntryArgsForCall []struct {
		arg1 string
	}
	deleteEntryReturns struct {
		result1 error
	}
	deleteEntryReturnsOnCall map[int]struct {
		result1 error
	}
	SubnetExistsStub        func(string) (bool, error)
	subnetExistsMutex       sync.RWMutex
	subnetExistsArgsForCall []struct {
		arg1 string
	}
	subnetExistsReturns struct {
		result1 bool
		result2 error
	}
	subnetExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	SubnetForUnderlayIPStub        func(string) (string, error)
	subnetForUnderlayIPMutex       sync.RWMutex
	subnetForUnderlayIPArgsForCall []struct {
		arg1 string
	}
	subnetForUnderlayIPReturns struct {
		result1 string
		result2 error
	}
	subnetForUnderlayIPReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DatabaseHandler) Migrate() (int, error) {
	fake.migrateMutex.Lock()
	ret, specificReturn := fake.migrateReturnsOnCall[len(fake.migrateArgsForCall)]
	fake.migrateArgsForCall = append(fake.migrateArgsForCall, struct{}{})
	fake.recordInvocation("Migrate", []interface{}{})
	fake.migrateMutex.Unlock()
	if fake.MigrateStub != nil {
		return fake.MigrateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.migrateReturns.result1, fake.migrateReturns.result2
}

func (fake *DatabaseHandler) MigrateCallCount() int {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	return len(fake.migrateArgsForCall)
}

func (fake *DatabaseHandler) MigrateReturns(result1 int, result2 error) {
	fake.MigrateStub = nil
	fake.migrateReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *DatabaseHandler) MigrateReturnsOnCall(i int, result1 int, result2 error) {
	fake.MigrateStub = nil
	if fake.migrateReturnsOnCall == nil {
		fake.migrateReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.migrateReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *DatabaseHandler) AddEntry(arg1 string, arg2 string) error {
	fake.addEntryMutex.Lock()
	ret, specificReturn := fake.addEntryReturnsOnCall[len(fake.addEntryArgsForCall)]
	fake.addEntryArgsForCall = append(fake.addEntryArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AddEntry", []interface{}{arg1, arg2})
	fake.addEntryMutex.Unlock()
	if fake.AddEntryStub != nil {
		return fake.AddEntryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addEntryReturns.result1
}

func (fake *DatabaseHandler) AddEntryCallCount() int {
	fake.addEntryMutex.RLock()
	defer fake.addEntryMutex.RUnlock()
	return len(fake.addEntryArgsForCall)
}

func (fake *DatabaseHandler) AddEntryArgsForCall(i int) (string, string) {
	fake.addEntryMutex.RLock()
	defer fake.addEntryMutex.RUnlock()
	return fake.addEntryArgsForCall[i].arg1, fake.addEntryArgsForCall[i].arg2
}

func (fake *DatabaseHandler) AddEntryReturns(result1 error) {
	fake.AddEntryStub = nil
	fake.addEntryReturns = struct {
		result1 error
	}{result1}
}

func (fake *DatabaseHandler) AddEntryReturnsOnCall(i int, result1 error) {
	fake.AddEntryStub = nil
	if fake.addEntryReturnsOnCall == nil {
		fake.addEntryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addEntryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DatabaseHandler) DeleteEntry(arg1 string) error {
	fake.deleteEntryMutex.Lock()
	ret, specificReturn := fake.deleteEntryReturnsOnCall[len(fake.deleteEntryArgsForCall)]
	fake.deleteEntryArgsForCall = append(fake.deleteEntryArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteEntry", []interface{}{arg1})
	fake.deleteEntryMutex.Unlock()
	if fake.DeleteEntryStub != nil {
		return fake.DeleteEntryStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteEntryReturns.result1
}

func (fake *DatabaseHandler) DeleteEntryCallCount() int {
	fake.deleteEntryMutex.RLock()
	defer fake.deleteEntryMutex.RUnlock()
	return len(fake.deleteEntryArgsForCall)
}

func (fake *DatabaseHandler) DeleteEntryArgsForCall(i int) string {
	fake.deleteEntryMutex.RLock()
	defer fake.deleteEntryMutex.RUnlock()
	return fake.deleteEntryArgsForCall[i].arg1
}

func (fake *DatabaseHandler) DeleteEntryReturns(result1 error) {
	fake.DeleteEntryStub = nil
	fake.deleteEntryReturns = struct {
		result1 error
	}{result1}
}

func (fake *DatabaseHandler) DeleteEntryReturnsOnCall(i int, result1 error) {
	fake.DeleteEntryStub = nil
	if fake.deleteEntryReturnsOnCall == nil {
		fake.deleteEntryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteEntryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DatabaseHandler) SubnetExists(arg1 string) (bool, error) {
	fake.subnetExistsMutex.Lock()
	ret, specificReturn := fake.subnetExistsReturnsOnCall[len(fake.subnetExistsArgsForCall)]
	fake.subnetExistsArgsForCall = append(fake.subnetExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SubnetExists", []interface{}{arg1})
	fake.subnetExistsMutex.Unlock()
	if fake.SubnetExistsStub != nil {
		return fake.SubnetExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.subnetExistsReturns.result1, fake.subnetExistsReturns.result2
}

func (fake *DatabaseHandler) SubnetExistsCallCount() int {
	fake.subnetExistsMutex.RLock()
	defer fake.subnetExistsMutex.RUnlock()
	return len(fake.subnetExistsArgsForCall)
}

func (fake *DatabaseHandler) SubnetExistsArgsForCall(i int) string {
	fake.subnetExistsMutex.RLock()
	defer fake.subnetExistsMutex.RUnlock()
	return fake.subnetExistsArgsForCall[i].arg1
}

func (fake *DatabaseHandler) SubnetExistsReturns(result1 bool, result2 error) {
	fake.SubnetExistsStub = nil
	fake.subnetExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *DatabaseHandler) SubnetExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.SubnetExistsStub = nil
	if fake.subnetExistsReturnsOnCall == nil {
		fake.subnetExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.subnetExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *DatabaseHandler) SubnetForUnderlayIP(arg1 string) (string, error) {
	fake.subnetForUnderlayIPMutex.Lock()
	ret, specificReturn := fake.subnetForUnderlayIPReturnsOnCall[len(fake.subnetForUnderlayIPArgsForCall)]
	fake.subnetForUnderlayIPArgsForCall = append(fake.subnetForUnderlayIPArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SubnetForUnderlayIP", []interface{}{arg1})
	fake.subnetForUnderlayIPMutex.Unlock()
	if fake.SubnetForUnderlayIPStub != nil {
		return fake.SubnetForUnderlayIPStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.subnetForUnderlayIPReturns.result1, fake.subnetForUnderlayIPReturns.result2
}

func (fake *DatabaseHandler) SubnetForUnderlayIPCallCount() int {
	fake.subnetForUnderlayIPMutex.RLock()
	defer fake.subnetForUnderlayIPMutex.RUnlock()
	return len(fake.subnetForUnderlayIPArgsForCall)
}

func (fake *DatabaseHandler) SubnetForUnderlayIPArgsForCall(i int) string {
	fake.subnetForUnderlayIPMutex.RLock()
	defer fake.subnetForUnderlayIPMutex.RUnlock()
	return fake.subnetForUnderlayIPArgsForCall[i].arg1
}

func (fake *DatabaseHandler) SubnetForUnderlayIPReturns(result1 string, result2 error) {
	fake.SubnetForUnderlayIPStub = nil
	fake.subnetForUnderlayIPReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DatabaseHandler) SubnetForUnderlayIPReturnsOnCall(i int, result1 string, result2 error) {
	fake.SubnetForUnderlayIPStub = nil
	if fake.subnetForUnderlayIPReturnsOnCall == nil {
		fake.subnetForUnderlayIPReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.subnetForUnderlayIPReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DatabaseHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	fake.addEntryMutex.RLock()
	defer fake.addEntryMutex.RUnlock()
	fake.deleteEntryMutex.RLock()
	defer fake.deleteEntryMutex.RUnlock()
	fake.subnetExistsMutex.RLock()
	defer fake.subnetExistsMutex.RUnlock()
	fake.subnetForUnderlayIPMutex.RLock()
	defer fake.subnetForUnderlayIPMutex.RUnlock()
	return fake.invocations
}

func (fake *DatabaseHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
