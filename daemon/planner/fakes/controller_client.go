// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/silk/controller"
)

type ControllerClient struct {
	GetRoutableLeasesStub        func() ([]controller.Lease, error)
	getRoutableLeasesMutex       sync.RWMutex
	getRoutableLeasesArgsForCall []struct{}
	getRoutableLeasesReturns     struct {
		result1 []controller.Lease
		result2 error
	}
	getRoutableLeasesReturnsOnCall map[int]struct {
		result1 []controller.Lease
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ControllerClient) GetRoutableLeases() ([]controller.Lease, error) {
	fake.getRoutableLeasesMutex.Lock()
	ret, specificReturn := fake.getRoutableLeasesReturnsOnCall[len(fake.getRoutableLeasesArgsForCall)]
	fake.getRoutableLeasesArgsForCall = append(fake.getRoutableLeasesArgsForCall, struct{}{})
	fake.recordInvocation("GetRoutableLeases", []interface{}{})
	fake.getRoutableLeasesMutex.Unlock()
	if fake.GetRoutableLeasesStub != nil {
		return fake.GetRoutableLeasesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getRoutableLeasesReturns.result1, fake.getRoutableLeasesReturns.result2
}

func (fake *ControllerClient) GetRoutableLeasesCallCount() int {
	fake.getRoutableLeasesMutex.RLock()
	defer fake.getRoutableLeasesMutex.RUnlock()
	return len(fake.getRoutableLeasesArgsForCall)
}

func (fake *ControllerClient) GetRoutableLeasesReturns(result1 []controller.Lease, result2 error) {
	fake.GetRoutableLeasesStub = nil
	fake.getRoutableLeasesReturns = struct {
		result1 []controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *ControllerClient) GetRoutableLeasesReturnsOnCall(i int, result1 []controller.Lease, result2 error) {
	fake.GetRoutableLeasesStub = nil
	if fake.getRoutableLeasesReturnsOnCall == nil {
		fake.getRoutableLeasesReturnsOnCall = make(map[int]struct {
			result1 []controller.Lease
			result2 error
		})
	}
	fake.getRoutableLeasesReturnsOnCall[i] = struct {
		result1 []controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *ControllerClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRoutableLeasesMutex.RLock()
	defer fake.getRoutableLeasesMutex.RUnlock()
	return fake.invocations
}

func (fake *ControllerClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
