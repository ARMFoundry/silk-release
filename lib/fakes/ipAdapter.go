// This file was generated by counterfeiter
package fakes

import (
	"sync"
)

type IPAdapter struct {
	EnableIP4ForwardStub        func() error
	enableIP4ForwardMutex       sync.RWMutex
	enableIP4ForwardArgsForCall []struct{}
	enableIP4ForwardReturns     struct {
		result1 error
	}
	enableIP4ForwardReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IPAdapter) EnableIP4Forward() error {
	fake.enableIP4ForwardMutex.Lock()
	ret, specificReturn := fake.enableIP4ForwardReturnsOnCall[len(fake.enableIP4ForwardArgsForCall)]
	fake.enableIP4ForwardArgsForCall = append(fake.enableIP4ForwardArgsForCall, struct{}{})
	fake.recordInvocation("EnableIP4Forward", []interface{}{})
	fake.enableIP4ForwardMutex.Unlock()
	if fake.EnableIP4ForwardStub != nil {
		return fake.EnableIP4ForwardStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.enableIP4ForwardReturns.result1
}

func (fake *IPAdapter) EnableIP4ForwardCallCount() int {
	fake.enableIP4ForwardMutex.RLock()
	defer fake.enableIP4ForwardMutex.RUnlock()
	return len(fake.enableIP4ForwardArgsForCall)
}

func (fake *IPAdapter) EnableIP4ForwardReturns(result1 error) {
	fake.EnableIP4ForwardStub = nil
	fake.enableIP4ForwardReturns = struct {
		result1 error
	}{result1}
}

func (fake *IPAdapter) EnableIP4ForwardReturnsOnCall(i int, result1 error) {
	fake.EnableIP4ForwardStub = nil
	if fake.enableIP4ForwardReturnsOnCall == nil {
		fake.enableIP4ForwardReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.enableIP4ForwardReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *IPAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enableIP4ForwardMutex.RLock()
	defer fake.enableIP4ForwardMutex.RUnlock()
	return fake.invocations
}

func (fake *IPAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
