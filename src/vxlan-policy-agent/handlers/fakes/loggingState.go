// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type LoggingState struct {
	DisableStub          func()
	disableMutex         sync.RWMutex
	disableArgsForCall   []struct{}
	EnableStub           func()
	enableMutex          sync.RWMutex
	enableArgsForCall    []struct{}
	IsEnabledStub        func() bool
	isEnabledMutex       sync.RWMutex
	isEnabledArgsForCall []struct{}
	isEnabledReturns     struct {
		result1 bool
	}
	isEnabledReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LoggingState) Disable() {
	fake.disableMutex.Lock()
	fake.disableArgsForCall = append(fake.disableArgsForCall, struct{}{})
	fake.recordInvocation("Disable", []interface{}{})
	fake.disableMutex.Unlock()
	if fake.DisableStub != nil {
		fake.DisableStub()
	}
}

func (fake *LoggingState) DisableCallCount() int {
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	return len(fake.disableArgsForCall)
}

func (fake *LoggingState) Enable() {
	fake.enableMutex.Lock()
	fake.enableArgsForCall = append(fake.enableArgsForCall, struct{}{})
	fake.recordInvocation("Enable", []interface{}{})
	fake.enableMutex.Unlock()
	if fake.EnableStub != nil {
		fake.EnableStub()
	}
}

func (fake *LoggingState) EnableCallCount() int {
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	return len(fake.enableArgsForCall)
}

func (fake *LoggingState) IsEnabled() bool {
	fake.isEnabledMutex.Lock()
	ret, specificReturn := fake.isEnabledReturnsOnCall[len(fake.isEnabledArgsForCall)]
	fake.isEnabledArgsForCall = append(fake.isEnabledArgsForCall, struct{}{})
	fake.recordInvocation("IsEnabled", []interface{}{})
	fake.isEnabledMutex.Unlock()
	if fake.IsEnabledStub != nil {
		return fake.IsEnabledStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isEnabledReturns.result1
}

func (fake *LoggingState) IsEnabledCallCount() int {
	fake.isEnabledMutex.RLock()
	defer fake.isEnabledMutex.RUnlock()
	return len(fake.isEnabledArgsForCall)
}

func (fake *LoggingState) IsEnabledReturns(result1 bool) {
	fake.IsEnabledStub = nil
	fake.isEnabledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *LoggingState) IsEnabledReturnsOnCall(i int, result1 bool) {
	fake.IsEnabledStub = nil
	if fake.isEnabledReturnsOnCall == nil {
		fake.isEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isEnabledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *LoggingState) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	fake.isEnabledMutex.RLock()
	defer fake.isEnabledMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LoggingState) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
