// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"
)

type HWAddrAdapter struct {
	GenerateHardwareAddr4Stub        func(net.IP, []byte) (net.HardwareAddr, error)
	generateHardwareAddr4Mutex       sync.RWMutex
	generateHardwareAddr4ArgsForCall []struct {
		arg1 net.IP
		arg2 []byte
	}
	generateHardwareAddr4Returns struct {
		result1 net.HardwareAddr
		result2 error
	}
	generateHardwareAddr4ReturnsOnCall map[int]struct {
		result1 net.HardwareAddr
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HWAddrAdapter) GenerateHardwareAddr4(arg1 net.IP, arg2 []byte) (net.HardwareAddr, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.generateHardwareAddr4Mutex.Lock()
	ret, specificReturn := fake.generateHardwareAddr4ReturnsOnCall[len(fake.generateHardwareAddr4ArgsForCall)]
	fake.generateHardwareAddr4ArgsForCall = append(fake.generateHardwareAddr4ArgsForCall, struct {
		arg1 net.IP
		arg2 []byte
	}{arg1, arg2Copy})
	fake.recordInvocation("GenerateHardwareAddr4", []interface{}{arg1, arg2Copy})
	fake.generateHardwareAddr4Mutex.Unlock()
	if fake.GenerateHardwareAddr4Stub != nil {
		return fake.GenerateHardwareAddr4Stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateHardwareAddr4Returns.result1, fake.generateHardwareAddr4Returns.result2
}

func (fake *HWAddrAdapter) GenerateHardwareAddr4CallCount() int {
	fake.generateHardwareAddr4Mutex.RLock()
	defer fake.generateHardwareAddr4Mutex.RUnlock()
	return len(fake.generateHardwareAddr4ArgsForCall)
}

func (fake *HWAddrAdapter) GenerateHardwareAddr4ArgsForCall(i int) (net.IP, []byte) {
	fake.generateHardwareAddr4Mutex.RLock()
	defer fake.generateHardwareAddr4Mutex.RUnlock()
	return fake.generateHardwareAddr4ArgsForCall[i].arg1, fake.generateHardwareAddr4ArgsForCall[i].arg2
}

func (fake *HWAddrAdapter) GenerateHardwareAddr4Returns(result1 net.HardwareAddr, result2 error) {
	fake.GenerateHardwareAddr4Stub = nil
	fake.generateHardwareAddr4Returns = struct {
		result1 net.HardwareAddr
		result2 error
	}{result1, result2}
}

func (fake *HWAddrAdapter) GenerateHardwareAddr4ReturnsOnCall(i int, result1 net.HardwareAddr, result2 error) {
	fake.GenerateHardwareAddr4Stub = nil
	if fake.generateHardwareAddr4ReturnsOnCall == nil {
		fake.generateHardwareAddr4ReturnsOnCall = make(map[int]struct {
			result1 net.HardwareAddr
			result2 error
		})
	}
	fake.generateHardwareAddr4ReturnsOnCall[i] = struct {
		result1 net.HardwareAddr
		result2 error
	}{result1, result2}
}

func (fake *HWAddrAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateHardwareAddr4Mutex.RLock()
	defer fake.generateHardwareAddr4Mutex.RUnlock()
	return fake.invocations
}

func (fake *HWAddrAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
