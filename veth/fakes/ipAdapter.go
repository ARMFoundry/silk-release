// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/containernetworking/cni/pkg/ip"
	"github.com/containernetworking/cni/pkg/ns"
)

type IPAdapter struct {
	SetupVethStub        func(string, int, ns.NetNS) (ip.Link, ip.Link, error)
	setupVethMutex       sync.RWMutex
	setupVethArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 ns.NetNS
	}
	setupVethReturns struct {
		result1 ip.Link
		result2 ip.Link
		result3 error
	}
	DelLinkByNameStub        func(string) error
	delLinkByNameMutex       sync.RWMutex
	delLinkByNameArgsForCall []struct {
		arg1 string
	}
	delLinkByNameReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IPAdapter) SetupVeth(arg1 string, arg2 int, arg3 ns.NetNS) (ip.Link, ip.Link, error) {
	fake.setupVethMutex.Lock()
	fake.setupVethArgsForCall = append(fake.setupVethArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 ns.NetNS
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetupVeth", []interface{}{arg1, arg2, arg3})
	fake.setupVethMutex.Unlock()
	if fake.SetupVethStub != nil {
		return fake.SetupVethStub(arg1, arg2, arg3)
	}
	return fake.setupVethReturns.result1, fake.setupVethReturns.result2, fake.setupVethReturns.result3
}

func (fake *IPAdapter) SetupVethCallCount() int {
	fake.setupVethMutex.RLock()
	defer fake.setupVethMutex.RUnlock()
	return len(fake.setupVethArgsForCall)
}

func (fake *IPAdapter) SetupVethArgsForCall(i int) (string, int, ns.NetNS) {
	fake.setupVethMutex.RLock()
	defer fake.setupVethMutex.RUnlock()
	return fake.setupVethArgsForCall[i].arg1, fake.setupVethArgsForCall[i].arg2, fake.setupVethArgsForCall[i].arg3
}

func (fake *IPAdapter) SetupVethReturns(result1 ip.Link, result2 ip.Link, result3 error) {
	fake.SetupVethStub = nil
	fake.setupVethReturns = struct {
		result1 ip.Link
		result2 ip.Link
		result3 error
	}{result1, result2, result3}
}

func (fake *IPAdapter) DelLinkByName(arg1 string) error {
	fake.delLinkByNameMutex.Lock()
	fake.delLinkByNameArgsForCall = append(fake.delLinkByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DelLinkByName", []interface{}{arg1})
	fake.delLinkByNameMutex.Unlock()
	if fake.DelLinkByNameStub != nil {
		return fake.DelLinkByNameStub(arg1)
	}
	return fake.delLinkByNameReturns.result1
}

func (fake *IPAdapter) DelLinkByNameCallCount() int {
	fake.delLinkByNameMutex.RLock()
	defer fake.delLinkByNameMutex.RUnlock()
	return len(fake.delLinkByNameArgsForCall)
}

func (fake *IPAdapter) DelLinkByNameArgsForCall(i int) string {
	fake.delLinkByNameMutex.RLock()
	defer fake.delLinkByNameMutex.RUnlock()
	return fake.delLinkByNameArgsForCall[i].arg1
}

func (fake *IPAdapter) DelLinkByNameReturns(result1 error) {
	fake.DelLinkByNameStub = nil
	fake.delLinkByNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *IPAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setupVethMutex.RLock()
	defer fake.setupVethMutex.RUnlock()
	fake.delLinkByNameMutex.RLock()
	defer fake.delLinkByNameMutex.RUnlock()
	return fake.invocations
}

func (fake *IPAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
