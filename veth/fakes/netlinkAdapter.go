// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/vishvananda/netlink"
)

type NetlinkAdapter struct {
	LinkByNameStub        func(string) (netlink.Link, error)
	linkByNameMutex       sync.RWMutex
	linkByNameArgsForCall []struct {
		arg1 string
	}
	linkByNameReturns struct {
		result1 netlink.Link
		result2 error
	}
	ParseAddrStub        func(string) (*netlink.Addr, error)
	parseAddrMutex       sync.RWMutex
	parseAddrArgsForCall []struct {
		arg1 string
	}
	parseAddrReturns struct {
		result1 *netlink.Addr
		result2 error
	}
	AddrAddStub        func(netlink.Link, *netlink.Addr) error
	addrAddMutex       sync.RWMutex
	addrAddArgsForCall []struct {
		arg1 netlink.Link
		arg2 *netlink.Addr
	}
	addrAddReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NetlinkAdapter) LinkByName(arg1 string) (netlink.Link, error) {
	fake.linkByNameMutex.Lock()
	fake.linkByNameArgsForCall = append(fake.linkByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("LinkByName", []interface{}{arg1})
	fake.linkByNameMutex.Unlock()
	if fake.LinkByNameStub != nil {
		return fake.LinkByNameStub(arg1)
	}
	return fake.linkByNameReturns.result1, fake.linkByNameReturns.result2
}

func (fake *NetlinkAdapter) LinkByNameCallCount() int {
	fake.linkByNameMutex.RLock()
	defer fake.linkByNameMutex.RUnlock()
	return len(fake.linkByNameArgsForCall)
}

func (fake *NetlinkAdapter) LinkByNameArgsForCall(i int) string {
	fake.linkByNameMutex.RLock()
	defer fake.linkByNameMutex.RUnlock()
	return fake.linkByNameArgsForCall[i].arg1
}

func (fake *NetlinkAdapter) LinkByNameReturns(result1 netlink.Link, result2 error) {
	fake.LinkByNameStub = nil
	fake.linkByNameReturns = struct {
		result1 netlink.Link
		result2 error
	}{result1, result2}
}

func (fake *NetlinkAdapter) ParseAddr(arg1 string) (*netlink.Addr, error) {
	fake.parseAddrMutex.Lock()
	fake.parseAddrArgsForCall = append(fake.parseAddrArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ParseAddr", []interface{}{arg1})
	fake.parseAddrMutex.Unlock()
	if fake.ParseAddrStub != nil {
		return fake.ParseAddrStub(arg1)
	}
	return fake.parseAddrReturns.result1, fake.parseAddrReturns.result2
}

func (fake *NetlinkAdapter) ParseAddrCallCount() int {
	fake.parseAddrMutex.RLock()
	defer fake.parseAddrMutex.RUnlock()
	return len(fake.parseAddrArgsForCall)
}

func (fake *NetlinkAdapter) ParseAddrArgsForCall(i int) string {
	fake.parseAddrMutex.RLock()
	defer fake.parseAddrMutex.RUnlock()
	return fake.parseAddrArgsForCall[i].arg1
}

func (fake *NetlinkAdapter) ParseAddrReturns(result1 *netlink.Addr, result2 error) {
	fake.ParseAddrStub = nil
	fake.parseAddrReturns = struct {
		result1 *netlink.Addr
		result2 error
	}{result1, result2}
}

func (fake *NetlinkAdapter) AddrAdd(arg1 netlink.Link, arg2 *netlink.Addr) error {
	fake.addrAddMutex.Lock()
	fake.addrAddArgsForCall = append(fake.addrAddArgsForCall, struct {
		arg1 netlink.Link
		arg2 *netlink.Addr
	}{arg1, arg2})
	fake.recordInvocation("AddrAdd", []interface{}{arg1, arg2})
	fake.addrAddMutex.Unlock()
	if fake.AddrAddStub != nil {
		return fake.AddrAddStub(arg1, arg2)
	}
	return fake.addrAddReturns.result1
}

func (fake *NetlinkAdapter) AddrAddCallCount() int {
	fake.addrAddMutex.RLock()
	defer fake.addrAddMutex.RUnlock()
	return len(fake.addrAddArgsForCall)
}

func (fake *NetlinkAdapter) AddrAddArgsForCall(i int) (netlink.Link, *netlink.Addr) {
	fake.addrAddMutex.RLock()
	defer fake.addrAddMutex.RUnlock()
	return fake.addrAddArgsForCall[i].arg1, fake.addrAddArgsForCall[i].arg2
}

func (fake *NetlinkAdapter) AddrAddReturns(result1 error) {
	fake.AddrAddStub = nil
	fake.addrAddReturns = struct {
		result1 error
	}{result1}
}

func (fake *NetlinkAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.linkByNameMutex.RLock()
	defer fake.linkByNameMutex.RUnlock()
	fake.parseAddrMutex.RLock()
	defer fake.parseAddrMutex.RUnlock()
	fake.addrAddMutex.RLock()
	defer fake.addrAddMutex.RUnlock()
	return fake.invocations
}

func (fake *NetlinkAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
